<?xml version="1.0"?>
<!--Ñ¢-->
<glyph ps-name="afii10146" init-graphics="yes">
 
 <!--
     Copyright (C) 2008  Andrey V. Panov
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->
 
 <constant name="hstem-left-bottom" value="0"/>
 <constant name="hstem-left-top" value="hstem-left-bottom + 1"/>
 <constant name="intersect-left-top" value="hstem-left-top + 1"/>
 <constant name="lstem-left-top" value="intersect-left-top + 1"/>
 <constant name="lstem-right-top" value="lstem-left-top + 1"/>
 <constant name="intersect-right-top" value="lstem-right-top + 1"/>
 <constant name="hstem-right-top" value="intersect-right-top + 1"/>
 <constant name="hstem-right-bottom" value="hstem-right-top + 1"/>
 <constant name="intersect-right-bottom" value="hstem-right-bottom + 1"/>
 <constant name="up-inner-left-bottom" value="intersect-right-bottom + 1"/>
 <constant name="up-inner-right-bottom" value="up-inner-left-bottom + 1"/>
 <constant name="low-outer-right" value="up-inner-right-bottom + 3"/>
 <constant name="right-bottom" value="low-outer-right + 3"/>
 <constant name="lstem-left-bottom" value="right-bottom + 1"/>
 <constant name="intersect-left-bottom" value="lstem-left-bottom + 1"/>
 <constant name="low-inner-left-bottom" value="19"/>
 <constant name="low-inner-right-bottom" value="low-inner-left-bottom + 1"/>
 <constant name="low-inner-right" value="low-inner-right-bottom + 3"/>
 <constant name="low-inner-right-top" value="low-inner-right + 3"/>
 <constant name="low-inner-left-top" value="low-inner-right-top + 1"/>
 <constant name="last" value="low-inner-left-top"/>
 
 <compile-if test="slanted">
  <push>cap-it-y-shift cap-it-x-shift 88</push>
  <command name="CALL"/>
 </compile-if>
 
 <set-vectors axis="y"/>
 <move distance="cap-x-baseline">
  <point num="lstem-left-bottom"/>
  <align>
   <point num="right-bottom"/>
  </align>
  <move distance="cap-horiz-stem" color="black">
   <point num="low-inner-left-bottom"/>
   <align>
    <point num="low-inner-right-bottom"/>
   </align>
  </move>
 </move>
 <move distance="cap-h-intersect-height">
  <reference>
   <point num="lstem-left-bottom"/>
  </reference>
  <point num="low-inner-left-top"/>
  <align>
   <point num="low-inner-right-top"/>
  </align>
  <move distance="cap-horiz-stem" color="black">
   <point num="up-inner-left-bottom"/>
   <align>
    <point num="up-inner-right-bottom"/>
   </align>
   <move>
    <point num="intersect-left-bottom"/>
    <align>
     <point num="intersect-right-bottom"/>
     <point num="hstem-left-bottom"/>
     <point num="hstem-right-bottom"/>
    </align>
    <move distance="cap-horiz-stem" color="black">
     <point num="intersect-left-top"/>
     <align>
      <point num="intersect-right-top"/>
      <point num="hstem-left-top"/>
      <point num="hstem-right-top"/>
     </align>
    </move>
   </move>
  </move>
 </move>
 <move distance="cap-x-height">
  <point num="lstem-left-top"/>
  <align>
   <point num="lstem-right-top"/>
  </align>
 </move>
 <set-equal target="temp" source="intersect-left-top -- lstem-left-top"/>
 <if test="temp &lt;= 0">
  <if test="(up-inner-left-bottom -- intersect-right-bottom) &gt; 1.5p or (temp &lt; 0)">
   <shift-absolute pixel-distance="-1.0p">
    <point num="intersect-left-bottom"/>
    <point num="intersect-right-bottom"/>
    <point num="hstem-left-bottom"/>
    <point num="hstem-right-bottom"/>
    <point num="intersect-left-top"/>
    <point num="intersect-right-top"/>
    <point num="hstem-left-top"/>
    <point num="hstem-right-top"/>
   </shift-absolute>
  </if>
 </if>
 
 <set-vectors axis="x"/>
 <move color="white">
  <reference>
   <point num="left-bearing"/>
  </reference>
  <point num="lstem-left-bottom"/>
  <align compile-if="slanted = 0">
   <point num="lstem-left-top"/>
   <point num="intersect-left-bottom"/>
   <point num="intersect-left-top"/>
  </align>
  <interpolate>
   <point num="hstem-left-bottom"/>
  </interpolate>
  <move distance="cap-vert-stem" color="black" compile-if="slanted = 0">
   <point num="lstem-right-top"/>
   <align>
    <point num="up-inner-left-bottom"/>
    <point num="low-inner-left-top"/>
    <point num="low-inner-left-bottom"/>
    <point num="intersect-right-top"/>
    <point num="intersect-right-bottom"/>
   </align>
  </move>
  <move distance="cap-b-low-space" color="black">
   <point num="low-outer-right"/>
   <move distance="cap-o-curve-stem" color="black">
    <point num="low-inner-right"/>
   </move>
  </move>
 </move>
 <compile-if test="slanted">
  <with-projection-vector x-component="variable(6)" y-component="negative(variable(7))">
   <align>
    <reference>
     <point num="lstem-left-bottom"/>
    </reference>
    <point num="lstem-left-top"/>
   </align>
  </with-projection-vector>
  <move>
   <point num="lstem-left-top"/>
   <move distance="cap-vert-stem" color="black">
    <reference>
     <point num="lstem-left-top"/>
    </reference>
    <point num="lstem-right-top"/>
   </move>
  </move>
  <with-projection-vector to-line="orthogonal">
   <line>
    <point num="lstem-left-bottom"/>
    <point num="lstem-left-top"/>
   </line>
   <align>
    <reference>
     <point num="lstem-left-bottom"/>
    </reference>
    <point num="intersect-left-bottom"/>
    <point num="intersect-left-top"/>
   </align>
   <align>
    <reference>
     <point num="lstem-right-top"/>
    </reference>
    <point num="intersect-right-top"/>
    <point num="intersect-right-bottom"/>
    <point num="up-inner-left-bottom"/>
    <point num="low-inner-left-top"/>
    <point num="low-inner-left-bottom"/>
  </align>
   <align>
    <reference>
     <point num="hstem-left-bottom"/>
    </reference>
    <point num="hstem-left-top"/>
   </align>
   <set-equal target="width" source="(low-outer-right -- right-bearing) - rbearing"/>
  </with-projection-vector>
  <round value="width" color="white"/>
  <else>
   <set-equal target="width" source="(low-outer-right -- right-bearing) - rbearing"/>
  </else>
 </compile-if>
 <if test="width &lt; 0.0p">
  <shift-absolute pixel-distance="width">
   <point num="lstem-left-bottom"/>
   <point num="lstem-left-top"/>
   <point num="intersect-left-bottom"/>
   <point num="intersect-left-top"/>
   <point num="lstem-right-top"/>
   <point num="intersect-right-top"/>
   <point num="intersect-right-bottom"/>
   <point num="up-inner-left-bottom"/>
   <point num="low-inner-left-top"/>
   <point num="low-inner-left-bottom"/>
   <point num="low-inner-right"/>
   <point num="low-outer-right"/>
  </shift-absolute>
 </if>
 <move>
  <reference>
   <point num="low-outer-right"/>
  </reference>
  <point num="right-bearing"/>
 </move>
 <compile-if test="slanted">
  <set-projection-vector to-line="orthogonal">
   <line>
    <point num="lstem-left-bottom"/>
    <point num="lstem-left-top"/>
   </line>
  </set-projection-vector>
  <else>
   <if test="(left-bearing -- hstem-left-bottom) = 0">
    <shift-absolute pixel-distance="1.0p">
     <point num="hstem-left-bottom"/>
    </shift-absolute>
   </if>
   <align>
    <reference>
     <point num="hstem-left-bottom"/>
    </reference>
    <point num="hstem-left-top"/>
   </align>
  </else>
 </compile-if>
 <move pixel-distance="hstem-left-top -- intersect-left-top" round="no">
  <reference>
   <point num="intersect-right-top"/>
  </reference>
  <point num="hstem-right-top"/>
  <align>
   <point num="hstem-right-bottom"/>
  </align>
 </move>
 <interpolate-untouched-points/>
 
</glyph>
