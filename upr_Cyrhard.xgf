<?xml version="1.0"?>
<xgridfit xmlns="http://xgridfit.sourceforge.net/Xgridfit2">

  <!--Cyr hard sign (ÑŠ)-->

  <glyph ps-name="afii10092" init-graphics="yes">
    <!--
     Copyright (C) 2008  Andrey V. Panov
     
     This program is free software; you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation; either version 2 of the License, or
     (at your option) any later version.
     
     This program is distributed in the hope that it will be useful,
     but WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
     GNU General Public License for more details.
     
     You should have received a copy of the GNU General Public License
     along with this program; if not, write to the Free Software
     Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
     -->
    <constant name="hstem-left-bottom" value="0"/>
    <constant name="hstem-left-top" value="hstem-left-bottom + 1"/>
    <constant name="right-top" value="hstem-left-top + 1"/>
    <constant name="up-inner-left-bottom" value="right-top + 1"/>
    <constant name="up-inner-right-bottom" value="up-inner-left-bottom + 1"/>
    <constant name="low-outer-right" value="up-inner-right-bottom + 3"/>
    <constant name="right-bottom" value="low-outer-right + 3"/>
    <constant name="lstem-left-bottom" value="right-bottom + 1"/>
    <constant name="lstem-left-top" value="lstem-left-bottom + 1"/>
    <constant name="low-inner-left-bottom" value="13"/>
    <constant name="low-inner-right-bottom" value="low-inner-left-bottom + 1"/>
    <constant name="low-inner-right" value="low-inner-right-bottom + 3"/>
    <constant name="low-inner-right-top" value="low-inner-right + 3"/>
    <constant name="low-inner-left-top" value="low-inner-right-top + 1"/>
    <constant name="last" value="low-inner-left-top"/>
    <constant name="left-bearing" value="last + 1"/>
    <compile-if test="slanted">
      <set-freedom-vector x-component="x-skew2" y-component="y-skew2"/>
      <set-projection-vector axis="y"/>
      <!--   <set-round-state round="to-grid"/> -->
      <else>
        <set-vectors axis="y"/>
      </else>
    </compile-if>
    <move distance="zero">
      <point num="lstem-left-bottom"/>
      <align>
        <point num="right-bottom"/>
      </align>
      <move distance="small-horiz-stem" color="black">
        <point num="low-inner-left-bottom"/>
        <align>
          <point num="low-inner-right-bottom"/>
        </align>
      </move>
    </move>
    <move distance="small-cyrn-intersect-height">
      <point num="low-inner-left-top"/>
      <align>
        <point num="low-inner-right-top"/>
      </align>
      <move distance="small-horiz-stem" color="black">
        <point num="up-inner-left-bottom"/>
        <align>
          <point num="up-inner-right-bottom"/>
        </align>
      </move>
    </move>
    <move distance="small-x-height">
      <point num="hstem-left-top"/>
      <align>
        <point num="right-top"/>
      </align>
      <move distance="small-horiz-stem">
        <point num="hstem-left-bottom"/>
        <align>
          <point num="lstem-left-top"/>
        </align>
      </move>
    </move>
    <compile-if test="slanted">
      <set-projection-vector x-component="x-skew1" y-component="y-skew1"/>
      <set-freedom-vector axis="x"/>
      <set-round-state round="no"/>
      <else>
        <set-vectors axis="x"/>
      </else>
    </compile-if>
    <move color="white">
      <reference>
        <point num="left-bearing"/>
      </reference>
      <point num="lstem-left-bottom"/>
      <align>
        <point num="lstem-left-top"/>
      </align>
      <interpolate>
        <point num="hstem-left-bottom"/>
      </interpolate>
      <move distance="small-vert-stem" color="black">
        <point num="right-top"/>
        <align>
          <point num="up-inner-left-bottom"/>
          <point num="low-inner-left-top"/>
          <point num="low-inner-left-bottom"/>
        </align>
      </move>
      <move distance="small-cyrv-low-space" color="black">
        <point num="low-outer-right"/>
        <move distance="small-o-curve-stem" color="black">
          <point num="low-inner-right"/>
        </move>
      </move>
    </move>
    <set-equal target="width" source="(low-outer-right -- right-bearing) - rbearing"/>
    <if test="width &lt; 0.0p">
      <shift-absolute pixel-distance="width">
        <point num="lstem-left-bottom"/>
        <point num="lstem-left-top"/>
        <point num="right-top"/>
        <point num="up-inner-left-bottom"/>
        <point num="low-inner-left-top"/>
        <point num="low-inner-left-bottom"/>
        <point num="low-inner-right"/>
        <point num="low-outer-right"/>
      </shift-absolute>
    </if>
    <if test="(left-bearing -- hstem-left-bottom) = 0">
      <shift-absolute pixel-distance="1.0p">
        <point num="hstem-left-bottom"/>
      </shift-absolute>
    </if>
    <align>
      <reference>
        <point num="hstem-left-bottom"/>
      </reference>
      <point num="hstem-left-top"/>
    </align>
    <compile-if test="slanted">
      <set-vectors axis="x"/>
      <set-equal target="temp" source="coord(lstem-left-bottom)"/>
      <mdap round="to-grid">
        <point num="lstem-left-bottom"/>
      </mdap>
      <shift-absolute pixel-distance="coord(lstem-left-bottom) - temp">
        <point num="lstem-left-top"/>
        <point num="right-top"/>
        <point num="up-inner-left-bottom"/>
        <point num="low-inner-left-top"/>
        <point num="low-inner-left-bottom"/>
        <point num="low-outer-right"/>
        <point num="low-inner-right"/>
      </shift-absolute>
    </compile-if>
    <interpolate-untouched-points/>
  </glyph>
  <!--Cyr Hard sign-->

</xgridfit>
